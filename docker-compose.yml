---
x-service: &api-definition
  build:
    context: .
    dockerfile: Dockerfile.dev
  environment:
    PORT: '5000'
    # DATABASE_URL: postgresql://passemploi:passemploi@db/passemploidb
    LOG_LEVEL: trace
  env_file:
    - path: ./.environment
  depends_on:
    # db:
    #   condition: service_healthy
    #   restart: true
    redis:
      condition: service_started
  develop:
    watch:
      - action: rebuild
        path: package.json
      - action: rebuild
        path: yarn.lock
      - action: sync+restart
        path: ./tsconfig.json
        target: /usr/src/app/tsconfig.json
      - action: sync
        path: ./
        target: /usr/src/app/
        ignore:
          - node_modules/
          - dist/
          - certs/
          - .vscode/
          - docker-compose.yml

services:
  api:
    <<: *api-definition
    ports:
      - '8082:5000' # Application
      - '9229:9229' # NodeJS debugger
    environment:
      PORT: '5000'
      # DATABASE_URL: postgresql://passemploi:passemploi@db/passemploidb
      LOG_LEVEL: trace
      VIRTUAL_HOST: id.pass-emploi.incubateur.net
      VIRTUAL_PORT: '5000'
    command: yarn watch

  # test:
  #   <<: *api-definition
  #   command: yarn test:e2e

  # db:
  #   image: docker.io/postgis/postgis:16-3.4-alpine
  #   platform: linux/amd64
  #   container_name: cej-auth-postgres
  #   ports:
  #     - '54322:5432'
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
  #     start_period: 20s
  #     interval: 30s
  #     retries: 5
  #     timeout: 5s
  #   environment:
  #     POSTGRES_USER: passemploi
  #     POSTGRES_PASSWORD: passemploi
  #     POSTGRES_DB: passemploidb
  #   volumes:
  #     - db-data:/var/lib/postgresql

  redis:
    image: docker.io/redis/redis-stack:7.2.0-v9
    container_name: cej-auth-redis
    ports:
      - '6777:6379' # c'est le redis
      - '8001:8001' # c'est le dashboard
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli -a $$REDIS_PASSWORD ping | grep PONG']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis-data:/data
    environment:
      REDIS_PASSWORD: myredispassword
      REDIS_ARGS: '--requirepass myredispassword --appendonly yes --save 60 1 --loglevel warning'

  https:
    image: docker.io/nginxproxy/nginx-proxy
    ports:
      - '443:443'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs

volumes:
  # db-data:
  redis-data:
